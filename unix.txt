//Bankerâ€™s algorithm for deadlock avoidance

#include <stdio.h>
int main() {
	int k=0, a=0, b=0, instance[5], availability[5], allocated[10][5], need[10][5], MAX[10][5], process,P[10], no_of_resources, cnt=0, i, j, op[10];
	printf("\n Enter the number of resources : ");
	scanf("%d", &no_of_resources);
	printf("\n enter the max instances of each resources\n");
	for (i = 0; i < no_of_resources; i++) {
		availability[i]=0;
		printf("%c= ",(i+97));
		scanf("%d",&instance[i]);
	}
	printf("\n Enter the number of processes : ");
	scanf("%d", &process);
	printf("\n Enter the allocation matrix \n     ");
	for (i = 0; i < no_of_resources; i++)
	printf(" %c", (i+97));
	printf("\n");
	for (i = 0; i < process; i++) {
		P[i]=i;
		printf("P[%d]  ", P[i]);
		for (j = 0; j < no_of_resources; j++) {
			scanf("%d", &allocated[i][j]);
			availability[j] += allocated[i][j];
		}
	}
	printf("\nEnter the MAX matrix \n     ");
	for (i = 0; i < no_of_resources; i++) {
		printf(" %c", (i+97));
		availability[i] = instance[i] - availability[i];
	}
	printf("\n");
	for (i = 0; i < process; i++) {
		printf("P[%d]  ", i);
		for (j=0; j < no_of_resources; j++)
		 scanf("%d", &MAX[i][j]);
	}
	printf("\nAvailability\n");
	for (i = 0; i < no_of_resources; i++)
		printf("%c ", (i+97));
	printf("\n");
	for(i = 0; i < no_of_resources; i++){
		printf("%d ", availability[i]);
	}
	printf("\n");
	A: a = -1;
	for (i = 0; i < process; i++) {
		cnt = 0;
		b = P[i];
		for (j = 0; j < no_of_resources; j++) {
			need[b][j] = MAX[b][j] - allocated[b][j];
			if(need[b][j] <= availability[j]){
				cnt++;
			}
		}
		if(cnt == no_of_resources) {
			op[k++] = P[i];
			for (j = 0; j < no_of_resources; j++){
				availability[j] += allocated[b][j];	
			}
		} 
		else{
			P[++a] = P[i];
		}
	}
	if(a != -1) {
		process = a + 1;
		goto A;
	}
	printf("\n Need Matrix \n     ");
	for (i = 0; i < no_of_resources; i++)
	printf(" %c", (i+97));
	printf("\n");
	for(i = 0; i < 5; i++){
		printf("P[%d]  ", i);
		for(j = 0; j < no_of_resources; j++){
			printf("%d ", need[i][j]);
		}
		printf("\n");
	}
	printf("\t <");
	for (i = 0; i < k; i++)
	printf(" P[%d] ", op[i]);
	printf(">");
}

//Best Fit and Worst Fit memory allocation strategies

#include<bits/stdc++.h>
#include<iostream>

void bestFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    for (int i = 0; i < n; i++)
        allocation[i] = -1;
    for (int i = 0; i < n; i++)
    {
        int bestIdx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                if (bestIdx == -1)
                    bestIdx = j;
                else if (blockSize[bestIdx] > blockSize[j])
                    bestIdx = j;
            }
        }
        if (bestIdx != -1)
        {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
    	printf(" %d\t\t%d\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
        	printf("%d", allocation[i] + 1);
        else
            printf("Not Allocated");
		printf("\n");
    }
}

void worstFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    memset(allocation, -1, sizeof(allocation));
    for (int i=0; i<n; i++)
    {
        int wstIdx = -1;
        for (int j=0; j<m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                if (wstIdx == -1)
                    wstIdx = j;
                else if (blockSize[wstIdx] < blockSize[j])
                    wstIdx = j;
            }
        }
        if (wstIdx != -1)
        {
            allocation[i] = wstIdx;
            blockSize[wstIdx] -= processSize[i];
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
    	printf(" %d\t\t%d\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
        	printf("%d", allocation[i] + 1);
        else
            printf("Not Allocated");
		printf("\n");
    }
}
int main()
{
	int c, *blockSize, *processSize, a, b, i;
	printf("Enter no of blocks = ");
	scanf("%d", &a);
	printf("Enter no of process = ");
	scanf("%d", &b);
	blockSize = (int *)calloc(a, sizeof(int));
	processSize = (int *)calloc(b, sizeof(int));
	printf("Enter size of blocks\n");
	for(i = 0; i < a; i++){
		printf("Block %d = ", i+1);
		scanf("%d", &blockSize[i]);
	}
	printf("Enter size of processes\n");
	for(i = 0; i < b; i++){
		printf("Process %d = ", i+1);
		scanf("%d", &processSize[i]);
	}
    //int blockSize[] = {100, 500, 200, 300, 600};
    //int processSize[] = {212, 417, 112, 426};
    //int m = sizeof(blockSize) / sizeof(blockSize[0]);
    //int n = sizeof(processSize) / sizeof(processSize[0]);
    int m = a;
    int n = b;
    printf("Menu\n1 - Best Fit\n2 - Worst Fit\nEnter Your Choice = ");
    scanf("%d", &c);
    switch(c){
    	case 1: {
    		bestFit(blockSize, m, processSize, n);
			break;
		}
		case 2: {
			worstFit(blockSize, m, processSize, n);
			break;
		}
		
		default : {
			printf("Incorrect Choice!");
		}
	}
	return 0 ;
}

//Contiguous, Linked and Indexed file allocation

#include<stdio.h>
#include<stdlib.h>
#include<conio.h> 
#include <string.h>
struct sequentialfileTable
{
char name[20]; 
int sb, nob;
} sequential_ft[30];
void sequentialAllocation() { 
int i, j, n;
char s[20]; 
printf("\n-------- Sequential File Allocation --------\n"); 
printf("Enter no of files: "); 
scanf("%d", &n); 
for(i = 0; i < n; i++) { 
printf("\nEnter file name %d: ", i+1); 
scanf("%s", sequential_ft[i].name); 
printf("Enter starting block of file %d: ", i+1); 
scanf("%d", &sequential_ft[i].sb); 
printf("Enter no of blocks in file %d: ", i+1); 
scanf("%d", &sequential_ft[i].nob); 
} 
printf("\nEnter the file name to be searched -- ");
scanf("%s", s); 
for(i = 0; i < n; i++) { 
if(strcmp(s, sequential_ft[i].name) == 0) {
break;
}
} 
if(i == n) {
printf("\nFile Not Found");
} else { 
printf("\nFILE NAME START BLOCK NO OF BLOCKS BLOCKS OCCUPIED\n"); 
printf("%s\t\t%d\t\t%d\t", sequential_ft[i].name, sequential_ft[i].sb, 
sequential_ft[i].nob); 
for(j = 0; j < sequential_ft[i].nob; j++) {
printf("%d, ", sequential_ft[i].sb + j);
}
} 
}
struct indexedfileTable
{
char name[20];
int nob, blocks[30];
} indexed_ft[30];
void indexedAllocation() {
int i, j, n; 
char s[20];
printf("\n-------- Indexed File Allocation --------\n");
printf("Enter no of files: "); 
scanf("%d", &n); 
for (i = 0; i < n; i++) {
printf("\nEnter file name %d: ", i+1); 
scanf("%s", indexed_ft[i].name); 
printf("Enter no of blocks in file %d: ", i+1); 
scanf("%d", &indexed_ft[i].nob); 
printf("Enter the blocks of the file: "); 
for (j = 0; j < indexed_ft[i].nob; j++)
scanf("%d", &indexed_ft[i].blocks[j]); 
} 
printf("\nEnter the file name to be searched: "); 
scanf("%s", s); 
for (i = 0; i < n; i++)
if (strcmp(s, indexed_ft[i].name) == 0)
break; 
if (i == n)
printf("\nFile Not Found"); 
else {
printf("\nFILE NAME NO OF BLOCKS BLOCKS OCCUPIED"); 
printf("\n%s\t\t\t%d\t\t", indexed_ft[i].name, indexed_ft[i].nob); 
for (j = 0; j < indexed_ft[i].nob; j++)
printf("%d, ", indexed_ft[i].blocks[j]); 
} 
}
struct linkedfileTable
{
char name[20];
int nob;
struct block *sb;
} linked_ft[30];
struct block {
int bno;
struct block *next;
};
void linkedAllocation() {
int i, j, n;
char s[20];
struct block *temp;
printf("\n-------- Linked File Allocation --------\n");
printf("Enter no of files :");
scanf("%d", &n);
for(i = 0; i < n; i++) {
printf("\nEnter file name %d :", i + 1);
scanf("%s", linked_ft[i].name);
printf("Enter no of blocks in file %d :", i + 1);
scanf("%d", &linked_ft[i].nob);
linked_ft[i].sb = (struct block*)malloc(sizeof(struct block));
temp = linked_ft[i].sb;
printf("Enter the blocks of the file :");
scanf("%d", &temp->bno);
temp->next = NULL;
for(j = 1; j < linked_ft[i].nob; j++) {
temp->next = (struct block*)malloc(sizeof(struct block));
temp = temp->next;
scanf("%d", &temp->bno);
}
temp->next = NULL;
}
printf("\nEnter the file name to be searched -- ");
scanf("%s", s);
for(i = 0; i < n; i++)
if(strcmp(s, linked_ft[i].name) == 0)
break;
if(i == n)
printf("\nFile Not Found");
else {
printf("\nFILE NAME NO OF BLOCKS BLOCKS OCCUPIED");
printf("\n %s\t\t\t%d\t", linked_ft[i].name, linked_ft[i].nob);
temp = linked_ft[i].sb;
for(j = 0; j < linked_ft[i].nob; j++) {
printf("%d -> ", temp->bno);
temp = temp->next;
}
}
}
int main()
{
int ch = 0;
while (ch < 4)
{
printf("\n\n1. Sequential Allocation\n2. Indexed Allocation\n3. Linked Allocation\n4. Exit\nEnter your choice : ");
scanf("%d", &ch);
if (ch == 4)
break;
switch (ch)
{
case 1:
sequentialAllocation();
break;
case 2:
indexedAllocation();
break;
case 3:
linkedAllocation();
break;
default:
printf("Invalid Choice!");
}
}
return 0;
}
//FCFS and SSTF disk scheduling

#include<bits/stdc++.h>

void FCFS(int temp, int a[], int n){
	int sum = 0, i;
	printf("%d", temp);
    for(i=0;i<n;i++){
    	printf(" -> %d ", a[i]);
        sum+=abs(a[i]-temp);
        temp=a[i];
    }
    printf("\n");
    printf("Total head movements = %d\n", sum);
    printf("\nAverage head movement = %f\n", (float)sum/n);
}

void calculatedifference(int request[], int head, int diff[][2], int n)
{
    for(int i = 0; i < n; i++)
    {
        diff[i][0] = abs(head - request[i]);
    }
}
int findMIN(int diff[][2], int n)
{
    int index = -1;
    int minimum = 1e9;
    for(int i = 0; i < n; i++)
    {
        if (!diff[i][1] && minimum > diff[i][0])
        {
            minimum = diff[i][0];
            index = i;
        }
    }
    return index;
}
 
void SSTF(int a[], int head, int n)
{
    if (n == 0)
    {
        return;
    }
    int diff[n][2] = { { 0, 0 } };
    int sum = 0;
    int seeksequence[n + 1] = {0};
    for(int i = 0; i < n; i++)
    {
        seeksequence[i] = head;
        calculatedifference(a, head, diff, n);
        int index = findMIN(diff, n);
        diff[index][1] = 1;
        sum += diff[index][0];
        head = a[index];
    }
    seeksequence[n] = head;
	for(int i = 0; i < n; i++){
    	printf(" %d -> ", seeksequence[i]);
    }
    printf(" %d", head);
    printf("\nTotal number of head movement = %d\n", sum);
    printf("\nAverage head movement = %f\n", (float)sum/n);
}

int main(){
    int i, n, m, sum=0, h, *a, c;
    printf("Enter the size of disk\n");
    scanf("%d", &m);
    printf("Enter number of requests\n");
    scanf("%d", &n);
    printf("Enter the requests\n");
    a = (int *)calloc(n, sizeof(int));
    for(i=0;i<n;i++){
    	scanf("%d", &a[i]);
    }
    for(i=0;i<n;i++){
        if(a[i]>m){
        	printf("Error, Unknown position %d\n", a[i]);
            return 0;
        }
    }
    printf("Enter the head position\n");
    scanf("%d", &h);
    int temp = h;
    printf("Menu\n1 - FCFS\n2 - SSTF\nEnter your choice = ");
    scanf("%d", &c);
    switch(c){
    	case 1: {
    		FCFS(temp, a, n);
			break;
		}
		
		case 2: {
			SSTF(a, temp, n);
			break;
		}
		default: {
			printf("Incorrect Choice\n");
		}
	}
    return 0;
}

//FIFO and LRU page replacement

#include <stdio.h>
int FIFO(int num_pages, int num_frames, int pages[]){
	int page_faults = 0, oldest_page_index = 0, next_frame_index = 0;
	int frames[num_frames];
    for (int i = 0; i < num_frames; i++) {
        frames[i] = -1;
    }
    printf("Incoming\t");
    for(int i = 0; i < num_frames; i++){
    	printf("Frame %d\t\t", i+1);
	}
	printf("\n");
    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int page_found = 0;
        for (int j = 0; j < num_frames; j++) {
            if (frames[j] == page) {
                page_found = 1;
                break;
            }
        }
        if (!page_found) {
            int oldest_page = frames[oldest_page_index];
            frames[oldest_page_index] = page;
            oldest_page_index = (oldest_page_index + 1) % num_frames;
            page_faults++;
        }
        printf("\n");
        printf("%d\t\t", pages[i]);
        for (int j = 0; j < num_frames; j++) {
            printf("%d\t\t", frames[j]);
        }
    }
    return page_faults;
}
int LRU(int num_pages, int num_frames, int pages[]){
	int page_faults = 0, least_recently_used_index = 0, next_frame_index = 0;
	int frames[num_frames];
    int page_age[num_frames];
    for (int i = 0; i < num_frames; i++) {
        frames[i] = -1;
        page_age[i] = -1;
    }
    printf("Incoming\t");
    for(int i = 0; i < num_frames; i++){
    	printf("Frame %d\t\t", i+1);
	}
	printf("\n");
    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int page_found = 0;
        for (int j = 0; j < num_frames; j++) {
            if (frames[j] == page) {
                page_found = 1;
                page_age[j] = i;
                break;
            }
        }
        if (!page_found) {
            int oldest_age = num_pages;
            for (int j = 0; j < num_frames; j++) {
                if (page_age[j] < oldest_age) {
                    oldest_age = page_age[j];
                    least_recently_used_index = j;
                }
            }
            frames[least_recently_used_index] = page;
            page_age[least_recently_used_index] = i;
            page_faults++;
        }
        printf("\n");
        printf("%d\t\t", pages[i]);
        for (int j = 0; j < num_frames; j++) {
            printf("%d\t\t", frames[j]);
        }
    }
    return page_faults;
}

int main() {
    int num_pages, num_frames, page_faults, c;
    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);
    int pages[num_pages];
    printf("Enter the page reference string: ");
    for (int i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }
    printf("Enter the number of frames: ");
    scanf("%d", &num_frames);
    printf("Menu\n1 - FIFO\n2 - LRU\nEnter your choice = ");
    scanf("%d", &c);
    switch(c){
    	case 1: {
    		page_faults = FIFO(num_pages, num_frames, pages);
			break;
		}
		case 2: {
			page_faults = LRU(num_pages, num_frames, pages);
			break;
		}
		
	}
	printf("\n\nTotal page faults: %d", page_faults);
    return 0;
}

//FIFO and Optimal page replacement

#include <stdio.h>
int FIFO(int num_pages, int num_frames, int pages[]){
	int page_faults = 0, oldest_page_index = 0, next_frame_index = 0;
	int frames[num_frames];
    for (int i = 0; i < num_frames; i++) {
        frames[i] = -1;
    }
    printf("Incoming\t");
    for(int i = 0; i < num_frames; i++){
    	printf("Frame %d\t\t", i+1);
	}
	printf("\n");
    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int page_found = 0;
        for (int j = 0; j < num_frames; j++) {
            if (frames[j] == page) {
                page_found = 1;
                break;
            }
        }
        if (!page_found) {
            int oldest_page = frames[oldest_page_index];
            frames[oldest_page_index] = page;
            oldest_page_index = (oldest_page_index + 1) % num_frames;
            page_faults++;
        }
        printf("\n");
        printf("%d\t\t", pages[i]);
        for (int j = 0; j < num_frames; j++) {
            printf("%d\t\t", frames[j]);
        }
    }
    return page_faults;
}
int OPTIMAL(int num_pages, int num_frames, int pages[]){
	int page_faults = 0, next_frame_index = 0, empty = num_frames;
	int frames[num_frames];
    for (int i = 0; i < num_frames; i++) {
        frames[i] = -1;
    }
    printf("Incoming\t");
    for(int i = 0; i < num_frames; i++){
    	printf("Frame %d\t\t", i+1);
	}
    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int page_found = 0;
        for (int j = 0; j < num_frames; j++) {
            if (frames[j] == page) {
                page_found = 1;
                break;
            }
        }
        if (!page_found) {
        	int page_to_replace = -1, farthest_reference = -1;
        	if(empty > 0){
        		page_to_replace = num_frames - empty;
        		empty--;
			}
			else{
	            for (int j = 0; j < num_frames; j++) {
	                int k;
	                for (k = i + 1; k < num_pages; k++) {
	                    if (frames[j] == pages[k]) {
	                        break;
	                    }
	                }
	                if (k == num_pages) {
	                    page_to_replace = j;
	                    break;
	                }
	                if (k > farthest_reference) {
	                    page_to_replace = j;
	                    farthest_reference = k;
	                }
	            }
			}
            frames[page_to_replace] = page;
            page_faults++;
        }
        printf("\n");
        printf("%d\t\t", pages[i]);
        for (int j = 0; j < num_frames; j++) {
            printf("%d\t\t", frames[j]);
        }
    }
    return page_faults;
}
int main() {
    int num_pages, num_frames, page_faults, c;
    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);
    int pages[num_pages];
    printf("Enter the page reference string: ");
    for (int i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }
    printf("Enter the number of frames: ");
    scanf("%d", &num_frames);
    printf("Menu\n1 - FIFO\n2 - OPTIMAL\nEnter your choice = ");
    scanf("%d", &c);
    switch(c){
    	case 1: {
    		page_faults = FIFO(num_pages, num_frames, pages);
			break;
		}
		
		case 2: {
			page_faults = OPTIMAL(num_pages, num_frames, pages);
			break;
		}
	}
	printf("\n\nTotal page faults: %d", page_faults);
    return 0;
}

//First Fit and Best Fit memory allocation strategies

#include<bits/stdc++.h>
#include<iostream>
void firstFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    memset(allocation, -1, sizeof(allocation));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
 
                break;
            }
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
    	printf(" %d\t\t%d\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
        	printf("%d", allocation[i] + 1);
        else
        	printf("Not Allocated");
		printf("\n");
    }
}
void bestFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    for (int i = 0; i < n; i++)
        allocation[i] = -1;
    for (int i = 0; i < n; i++)
    {
        int bestIdx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                if (bestIdx == -1)
                    bestIdx = j;
                else if (blockSize[bestIdx] > blockSize[j])
                    bestIdx = j;
            }
        }
        if (bestIdx != -1)
        {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
    	printf(" %d\t\t%d\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
        	printf("%d", allocation[i] + 1);
        else
            printf("Not Allocated");
		printf("\n");
    }
}
int main()
{
	int c, *blockSize, *processSize, a, b, i;
	printf("Enter no of blocks = ");
	scanf("%d", &a);
	printf("Enter no of process = ");
	scanf("%d", &b);
	blockSize = (int *)calloc(a, sizeof(int));
	processSize = (int *)calloc(b, sizeof(int));
	printf("Enter size of blocks\n");
	for(i = 0; i < a; i++){
		printf("Block %d = ", i+1);
		scanf("%d", &blockSize[i]);
	}
	printf("Enter size of processes\n");
	for(i = 0; i < b; i++){
		printf("Process %d = ", i+1);
		scanf("%d", &processSize[i]);
	}
    //int blockSize[] = {100, 500, 200, 300, 600};
    //int processSize[] = {212, 417, 112, 426};
    //int m = sizeof(blockSize) / sizeof(blockSize[0]);
    //int n = sizeof(processSize) / sizeof(processSize[0]);
    int m = a;
    int n = b;
    printf("Menu\n1 - First Fit\n2 - Best Fit\nEnter Your Choice = ");
    scanf("%d", &c);
    switch(c){
    	case 1: {
    		firstFit(blockSize, m, processSize, n);
			break;
		}
		case 2: {
			bestFit(blockSize, m, processSize, n);
			break;
		}
		
		default : {
			printf("Incorrect Choice!");
		}
	}
	return 0 ;
}

//First Fit and Next Fit memory allocation strategies

#include<bits/stdc++.h>
#include<iostream>
void firstFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    memset(allocation, -1, sizeof(allocation));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
 
                break;
            }
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
    	printf(" %d\t\t%d\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
        	printf("%d", allocation[i] + 1);
        else
        	printf("Not Allocated");
		printf("\n");
    }
}

void NextFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n], j = 0, t = m - 1;
    memset(allocation, -1, sizeof(allocation));
    for(int i = 0; i < n; i++){
        while (j < m){
            if(blockSize[j] >= processSize[i]){
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                t = (j - 1) % m;
                break;
            }
            if (t == j){
                t = (j - 1) % m;
                break;
            }
            j = (j + 1) % m;
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++) 
	{
    	printf(" %d\t\t%d\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
        	printf("%d", allocation[i] + 1);
        else
            printf("Not Allocated");
		printf("\n");
    }
}

int main()
{
	int c, *blockSize, *processSize, a, b, i;
	printf("Enter no of blocks = ");
	scanf("%d", &a);
	printf("Enter no of process = ");
	scanf("%d", &b);
	blockSize = (int *)calloc(a, sizeof(int));
	processSize = (int *)calloc(b, sizeof(int));
	printf("Enter size of blocks\n");
	for(i = 0; i < a; i++){
		printf("Block %d = ", i+1);
		scanf("%d", &blockSize[i]);
	}
	printf("Enter size of processes\n");
	for(i = 0; i < b; i++){
		printf("Process %d = ", i+1);
		scanf("%d", &processSize[i]);
	}
    //int blockSize[] = {100, 500, 200, 300, 600};
    //int processSize[] = {212, 417, 112, 426};
    //int m = sizeof(blockSize) / sizeof(blockSize[0]);
    //int n = sizeof(processSize) / sizeof(processSize[0]);
    int m = a;
    int n = b;
    printf("Menu\n1 - First Fit\n2 - Next Fit\n-Enter Your Choice = ");
    scanf("%d", &c);
    switch(c){
    	case 1: {
    		firstFit(blockSize, m, processSize, n);
			break;
		}
		
		case 2: {
			NextFit(blockSize, m, processSize, n);
			break;
		}
		default : {
			printf("Incorrect Choice!");
		}
	}
	return 0 ;
}

//Non-Preemptive SJF Scheduling of processes

#include<stdio.h>
#include<stdlib.h>
int main(){
	int *p, *bt, *at, *ct, *tat, *wt, *cbt, i, j, temp, n, l, k;
	float Abt = 0, Aat = 0, Act = 0, Atat = 0, Awt = 0;
	printf("Enter no. of processes = ");
	scanf("%d", &n);
	p = (int *)calloc(n, sizeof(int));
	bt = (int *)calloc(n, sizeof(int));
	at = (int *)calloc(n, sizeof(int));
	ct = (int *)calloc(n, sizeof(int));
	tat = (int *)calloc(n, sizeof(int));
	wt = (int *)calloc(n, sizeof(int));
	//cbt = (int *)calloc(n, sizeof(int));
	printf("Enter burst time and arrival time of each process\n");
	for(i = 0; i < n; i++){
		p[i] = i+1;
		printf("Process %d\n", p[i]);
		printf("Burst time = ");
		scanf("%d", &bt[i]);
		printf("Arrival time = ");
		scanf("%d", &at[i]);
		/*cbt[i] = bt[i];*/
	}
	for(i = 0; i < n-1; i++){
		for(j = 0; j < n-1; j++){
			if(at[j+1] < at[j]){
				temp = p[j];
				p[j] = p[j+1];
				p[j+1] = temp;
				temp = at[j];
				at[j] = at[j+1];
				at[j+1] = temp;
				temp = bt[j];
				bt[j] = bt[j+1];
				bt[j+1] = temp;
				/*temp = cbt[j];
				cbt[j] = cbt[j+1];
				cbt[j+1] = temp;*/
			}
		}
	}
	for(i = 0; i < n-1; i++){
		for(j = 0; j < n-1; j++){
			if(at[j+1] == at[j]){
				if(bt[j+1] < bt[j]){
					temp = p[j];
					p[j] = p[j+1];
					p[j+1] = temp;
					temp = at[j];
					at[j] = at[j+1];
					at[j+1] = temp;
					temp = bt[j];
					bt[j] = bt[j+1];
					bt[j+1] = temp;
					/*temp = cbt[j];
					cbt[j] = cbt[j+1];
					cbt[j+1] = temp;*/
				}
			}
		}
	}
	/*printf("\n\n");
	for(i = 0; i < n; i++){
		printf("Process %d\n", p[i]);
		printf("Burst time = %d\n", bt[i]);
		printf("Arrival time = %d\n", at[i]);
	}*/
	l = 0;
	for(i = 0; i < n; i++){
		l = l + bt[i];
		ct[i] = l;
		tat[i] = ct[i] - at[i];
		wt[i] = tat[i] - bt[i];
		for(k = i+1; k < n-1; k++){
			for(j = i+1; j < n-1; j++){
				if(at[j+1] <= ct[i] && at[j] <= ct[i]){
					if(bt[j+1] < bt[j]){
						temp = p[j];
						p[j] = p[j+1];
						p[j+1] = temp;
						temp = at[j];
						at[j] = at[j+1];
						at[j+1] = temp;
						temp = bt[j];
						bt[j] = bt[j+1];
						bt[j+1] = temp;
						/*temp = cbt[j];
						cbt[j] = cbt[j+1];
						cbt[j+1] = temp;*/
					}
				}
			}
		}
		/*printf("\n\n");
		for(j = i+1; j < n; j++){
			printf("Process %d\n", p[j]);
			printf("Burst time = %d\n", bt[j]);
			printf("Arrival time = %d\n", at[j]);
		}*/
	}
	for(i= 0; i < n; i++){
		Act = Act + ct[i];
		Abt = Abt + bt[i];
		Atat = Atat + tat[i];
		Awt = Awt + wt[i];
		Aat = Aat +at[i];
	}
	Act /= n;
	Abt /= n;
	Awt /= n;
	Atat /= n;
	Aat /= n;
	printf("SrNo.\tProcces\tBurstTime\tArrivalTime\tWaitingTime\tTurnAroundTime\tCompletionTime\n");
	for(i = 0; i < n; i++){
		printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i+1, p[i], bt[i], at[i], wt[i], tat[i], ct[i]);
	}
	printf("Average Burst Time = %f\n", Abt);
	printf("Average Arrival Time = %f\n", Aat);
	printf("Average Waiting Time = %f\n", Awt);
	printf("Average Turn Around Time = %f\n", Atat);
	printf("Average Completion Time = %f\n", Act);
	return 0;
} 

//Producer Consumer solution using locks

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>  
#include <pthread.h>
#include <semaphore.h>
#define N 10
#define n 10

sem_t *sem1,*sem2;
int ret;
pthread_mutex_t lock;

typedef struct queue{
int a[n];
int front,rear;

}queue;
queue q;


void enqueue(int x) {
 q.rear=(q.rear+1)%n;
    q.a[q.rear] = x;
}
int dequeue(){
int x;
q.front=(q.front+1)%n;
x=q.a[q.front];

return x;

}

void *Producer(void *args)
{

int x,c=1;
FILE *fptr;
fptr=fopen("input.txt","r");
while(c<=(N)){
ret=sem_wait(sem1);
fscanf(fptr,"%d\n",&x);
enqueue(x);
pthread_mutex_lock(&lock);
pthread_mutex_unlock(&lock);
ret=sem_post(sem2);
c++;
}
return NULL;
}


void *Consumer(void *args)
{ int c=1;
FILE *fptr;
fptr=fopen("output.txt","w");
while(c<=(N)){
ret=sem_wait(sem2);
pthread_mutex_lock(&lock);
fprintf(fptr,"%d\n",dequeue());
pthread_mutex_unlock(&lock);
ret = sem_post(sem1);
c++;
}
return NULL;
}

int main()
{
//FILE *fptr;
int num;
//fptr=fopen("input.txt","w");
//for(int i=0;i<N;i++)
//{
//fprintf(fptr,"%d\n",num=rand()%1000+1);
//}
//fclose(fptr);
sem1 = (sem_t*)malloc(sizeof(sem_t));
sem2 = (sem_t*) malloc(sizeof(sem_t));
sem_init(sem1,0,n);
sem_init(sem2,0,0);

pthread_t t1;
pthread_t t2;
if (pthread_mutex_init(&lock, NULL) != 0) {
printf("\n mutex init has failed\n");
return 1;
}
 
pthread_create(&t1, NULL, Producer,NULL);

pthread_create(&t2,NULL, Consumer,NULL);
 
pthread_join(t1, NULL);
pthread_join(t2, NULL);

pthread_mutex_destroy(&lock);
sem_destroy(sem1);
sem_destroy(sem2);
 
exit(0);
}

//Preemptive SJF / SRTF/ SRTN Scheduling of processes

#include<stdio.h>
#include<stdlib.h>
int main(){
	int *p, *at, *bt, *ct, *tat, *wt, *rt, *r, *cbt, i, j, n, total = 0, *procs, temp, k, small;
	float Abt = 0, Aat = 0, Act = 0, Atat = 0, Awt = 0, Art = 0;
	printf("Enter number of process = ");
	scanf("%d", &n);
	p = (int *)calloc(n, sizeof(int));
	bt = (int *)calloc(n, sizeof(int));
	at = (int *)calloc(n, sizeof(int));
	ct = (int *)calloc(n, sizeof(int));
	tat = (int *)calloc(n, sizeof(int));
	wt = (int *)calloc(n, sizeof(int));
	rt = (int *)calloc(n, sizeof(int));
	cbt = (int *)calloc(n, sizeof(int));
	procs = (int *)calloc(n, sizeof(int));
	r = (int *)calloc(n, sizeof(int));
	printf("Enter burst time and arrival time of each process\n");
	for(i = 0; i < n; i++){
		p[i] = i+1;
		printf("Process %d\n", p[i]);
		printf("Burst time = ");
		scanf("%d", &bt[i]);
		printf("Arrival time = ");
		scanf("%d", &at[i]);
		cbt[i] = bt[i];
		total = total + bt[i];
	}
	for(i = 0; i < n-1; i++){
		for(j = 0; j < n-1; j++){
			if(at[j+1] < at[j]){
				temp = p[j];
				p[j] = p[j+1];
				p[j+1] = temp;
				temp = at[j];
				at[j] = at[j+1];
				at[j+1] = temp;
				temp = bt[j];
				bt[j] = bt[j+1];
				bt[j+1] = temp;
				temp = cbt[j];
				cbt[j] = cbt[j+1];
				cbt[j+1] = temp;
			}
		}
	}
	for(i = 0; i < n-1; i++){
		for(j = 0; j < n-1; j++){
			if(at[j+1] == at[j]){
				if(bt[j+1] < bt[j]){
					temp = p[j];
					p[j] = p[j+1];
					p[j+1] = temp;
					temp = at[j];
					at[j] = at[j+1];
					at[j+1] = temp;
					temp = bt[j];
					bt[j] = bt[j+1];
					bt[j+1] = temp;
					temp = cbt[j];
					cbt[j] = cbt[j+1];
					cbt[j+1] = temp;
				}
			}
		}
	}
	for(i = 0; i < total; i++){
		small = total;
		for(j = 0; j < n; j++){
			if(cbt[j] != 0 && at[j] <= i && cbt[j] < small){
				small = cbt[j];
				k = j;
			}
		}
		cbt[k]--;
		procs[i] = k;
		if(r[k] == 0){
			r[k]++;
			rt[k] = i-at[k];
		}
	}
	for(i = 0; i < total; i++){
		for(j = 0; j < n; j++){
			if(procs[i] == j){
				ct[j] = i+1;
			}
		}
	}
	for(i = 0; i < n-1; i++){
		for(j = 0; j < n-1; j++){
			if(ct[j+1] < ct[j]){
				temp = p[j];
				p[j] = p[j+1];
				p[j+1] = temp;
				temp = at[j];
				at[j] = at[j+1];
				at[j+1] = temp;
				temp = bt[j];
				bt[j] = bt[j+1];
				bt[j+1] = temp;
				temp = ct[j];
				ct[j] = ct[j+1];
				ct[j+1] = temp;
				temp = rt[j];
				rt[j] = rt[j+1];
				rt[j+1] = temp;
			}
		}
	}
	for(i = 0; i < n; i++){
		tat[i] = ct[i] - at[i];
		wt[i] = tat[i] - bt[i];
	}
	for(i= 0; i < n; i++){
		Act = Act + ct[i];
		Abt = Abt + bt[i];
		Atat = Atat + tat[i];
		Awt = Awt + wt[i];
		Aat = Aat + rt[i];
		Art = Art + rt[i];
	}
	Act /= n;
	Abt /= n;
	Awt /= n;
	Atat /= n;
	Aat /= n;
	Art /= n;
	printf("SrNo.\tProcces\tBurstTime\tArrivalTime\tWaitingTime\tResponseTime\tTurnAroundTime\tCompletionTime\n");
	for(i = 0; i < n; i++){
		printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i+1, p[i], bt[i], at[i], wt[i], rt[i], tat[i], ct[i]);
	}
	printf("Average Burst Time = %f\n", Abt);
	printf("Average Arrival Time = %f\n", Aat);
	printf("Average Waiting Time = %f\n", Awt);
	printf("Average Turn Around Time = %f\n", Atat);
	printf("Average Completion Time = %f\n", Act);
	printf("Average Response Time = %f\n", Art);
	return 0;
}

//Round Robin Scheduling of processes

#include<stdio.h>
#include<stdlib.h>
int main(){
	int *cbt, t = 0, n , i, quantum, *wt, count = 0, *bt, *tat, *at, *p, *rt, *r, *ct, j, temp;
	float Atat, Act, Abt, Aat, Art, Awt;
	printf("Enter no. of process = ");
	scanf("%d", &n);
	p = (int *)calloc(n, sizeof(int));
	cbt = (int *)calloc(n, sizeof(int));
	bt = (int *)calloc(n, sizeof(int));
	ct = (int *)calloc(n, sizeof(int));
	at = (int *)calloc(n, sizeof(int));
	wt = (int *)calloc(n, sizeof(int));
	tat = (int *)calloc(n, sizeof(int));
	wt = (int *)calloc(n, sizeof(int));
	rt = (int *)calloc(n, sizeof(int));
	r = (int *)calloc(n, sizeof(int));
	printf("Enter burst time and arrival time of each process\n");
	for(i = 0; i < n; i++){
		p[i] = i+1;
		printf("Process %d\n", p[i]);
		printf("Burst time = ");
		scanf("%d", &bt[i]);
		printf("Arrival time = ");
		scanf("%d", &at[i]);
		cbt[i] = bt[i];
	}
	for(i = 0; i < n-1; i++){
		for(j = 0; j < n-1; j++){
			if(at[j+1] < at[j]){
				temp = p[j];
				p[j] = p[j+1];
				p[j+1] = temp;
				temp = at[j];
				at[j] = at[j+1];
				at[j+1] = temp;
				temp = bt[j];
				bt[j] = bt[j+1];
				bt[j+1] = temp;
				temp = cbt[j];
				cbt[j] = cbt[j+1];
				cbt[j+1] = temp;
			}
		}
	}
	printf("Enter time quantum = ");
	scanf("%d", &quantum);
	while(1){
		count = 0;
		i = 0;
		while(i != n){
			if(cbt[i] > 0){
				count = 1;
				if(r[i] == 0){
					r[i]++;
					rt[i] = t-at[i];
				}
				if(cbt[i] > quantum){
					t += quantum;
					cbt[i] -= quantum;
				}
				else{
					t += cbt[i];
					tat[i] = t - at[i];
					wt[i] = tat[i] - bt[i];
					ct[i] = tat[i] + at[i];
					cbt[i] = 0;
				}
			}
			i++;
			if(i < n-1){
				if(at[i] > t){
					i = 0;
				}
			}
		}
		if(count == 0){
			break;
		}
	}
	for(i= 0; i < n; i++){
		Act = Act + ct[i];
		Abt = Abt + bt[i];
		Atat = Atat + tat[i];
		Awt = Awt + wt[i];
		Aat = Aat + rt[i];
		Art = Art + rt[i];
	}
	Act /= n;
	Abt /= n;
	Awt /= n;
	Atat /= n;
	Aat /= n;
	Art /= n;
	printf("SrNo.\tProcces\tBurstTime\tArrivalTime\tWaitingTime\tResponseTime\tTurnAroundTime\tCompletionTime\n");
	for(i = 0; i < n; i++){
		printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i+1, p[i], bt[i], at[i], wt[i], rt[i], tat[i], ct[i]);
	}
	printf("Average Burst Time = %f\n", Abt);
	printf("Average Arrival Time = %f\n", Aat);
	printf("Average Waiting Time = %f\n", Awt);
	printf("Average Turn Around Time = %f\n", Atat);
	printf("Average Completion Time = %f\n", Act);
	printf("Average Response Time = %f\n", Art);
	return 0;
}

//Safety Check for deadlock detection

#include<stdio.h>
static int mark[20];
int i, j, np, nr;


int main()
{
int alloc[10][10],request[10][10],avail[10],r[10],w[10];


printf ("\nEnter the no of the process: ");
scanf("%d",&np);
printf ("\nEnter the no of resources: ");
scanf("%d",&nr);
for(i=0;i<nr; i++)
{
printf("\nTotal Amount of the Resource R % d: ",i+1);
scanf("%d", &r[i]);
}
printf("\nEnter the request matrix:\n");


for(i=0;i<np;i++)
for(j=0;j<nr;j++)
scanf("%d",&request[i][j]);


printf("\nEnter the allocation matrix:\n");
for(i=0;i<np;i++)
for(j=0;j<nr;j++)
scanf("%d",&alloc[i][j]);
//Available Resource calculation/
for(j=0;j<nr;j++)
{
avail[j]=r[j];
for(i=0;i<np;i++)
{
avail[j]-=alloc[i][j];


}
}


//marking processes with zero allocation


for(i=0;i<np;i++)
{
int count=0;
 for(j=0;j<nr;j++)
   {
      if(alloc[i][j]==0)
        count++;
      else
        break;
    }
 if(count==nr)
 mark[i]=1;
}
// initialize W with avail


for(j=0;j<nr; j++)
    w[j]=avail[j];


//mark processes with request less than or equal to W
for(i=0;i<np; i++)
{
int canbeprocessed= 0;
 if(mark[i]!=1)
{
   for(j=0;j<nr;j++)
    {
      if(request[i][j]<=w[j])
        canbeprocessed=1;
      else
         {
         canbeprocessed=0;
         break;
          }
     }
if(canbeprocessed)
{
mark[i]=1;


for(j=0;j<nr;j++)
w[j]+=alloc[i][j];
}
}
}


//checking for unmarked processes
int deadlock=0;
for(i=0;i<np;i++)
if(mark[i]!=1)
deadlock=1;




if(deadlock)
printf("\n Deadlock detected");
else
printf("\n No Deadlock possible");
}

//SSTF and SCAN disk scheduling

#include<bits/stdc++.h>

void SCAN(int temp, int a[], int n, int m){
	int i, sum = 0, h, k, j, x, move, dloc, max, min;
	h = temp;
    printf("Enter the head movement direction for left 0 and for right 1\n");
    scanf("%d", &move);
    a[n] = temp;
	n = n + 1;
	for(i = 0; i < n; i++)
	{
		for(j=i ; j < n; j++)
		{
			if(a[i] > a[j])
			{
				x = a[i];
				a[i] = a[j];
				a[j] = x;
			}
		}
	}
	max = a[n-1];
	min = a[0];
	if(move == 0){
		for(i = 0; i < n; i++)
		{
			if(temp == a[i]) 
			{ 
				dloc = i;
				break;
			}
		}
		for(i = dloc ; i >= 0; i--)
		{
			printf(" %d --> ", a[i]);
		}
		printf(" 0 --> ");
		for(i = dloc + 1; i < n; i++)
		{
			printf(" %d --> ", a[i]);
		}
		x = 2*(temp) + (max - temp);
	}
	else{
		for(i = 0; i < n; i++)
		{
			if(temp == a[i]) 
			{ 
				dloc = i;
				break;
			}
		}
		for(i = dloc; i < n; i++)
		{
			printf(" %d --> ", a[i]);
		}
		printf(" %d ", m-1);
		for(i = dloc - 1; i >= 0; i--)
		{
			printf(" --> %d ", a[i]);
		}
		x = 2*(m-1-temp) + (temp - min);
	}
    sum += x;
    printf("\nTotal head movement is %d", sum);
    printf("\nAverage head movement = %f\n", (float)sum/n);
}

void calculatedifference(int request[], int head, int diff[][2], int n)
{
    for(int i = 0; i < n; i++)
    {
        diff[i][0] = abs(head - request[i]);
    }
}
int findMIN(int diff[][2], int n)
{
    int index = -1;
    int minimum = 1e9;
    for(int i = 0; i < n; i++)
    {
        if (!diff[i][1] && minimum > diff[i][0])
        {
            minimum = diff[i][0];
            index = i;
        }
    }
    return index;
}
 
void SSTF(int a[], int head, int n)
{
    if (n == 0)
    {
        return;
    }
    int diff[n][2] = { { 0, 0 } };
    int sum = 0;
    int seeksequence[n + 1] = {0};
    for(int i = 0; i < n; i++)
    {
        seeksequence[i] = head;
        calculatedifference(a, head, diff, n);
        int index = findMIN(diff, n);
        diff[index][1] = 1;
        sum += diff[index][0];
        head = a[index];
    }
    seeksequence[n] = head;
	for(int i = 0; i < n; i++){
    	printf(" %d -> ", seeksequence[i]);
    }
    printf(" %d", head);
    printf("\nTotal number of head movement = %d\n", sum);
    printf("\nAverage head movement = %f\n", (float)sum/n);
}

int main(){
    int i, n, m, sum=0, h, *a, c;
    printf("Enter the size of disk\n");
    scanf("%d", &m);
    printf("Enter number of requests\n");
    scanf("%d", &n);
    printf("Enter the requests\n");
    a = (int *)calloc(n, sizeof(int));
    for(i=0;i<n;i++){
    	scanf("%d", &a[i]);
    }
    for(i=0;i<n;i++){
        if(a[i]>m){
        	printf("Error, Unknown position %d\n", a[i]);
            return 0;
        }
    }
    printf("Enter the head position\n");
    scanf("%d", &h);
    int temp = h;
    printf("Menu\n1 - SCAN\n2 - SSTF\nEnter your choice = ");
    scanf("%d", &c);
    switch(c){
    	
		case 1: {
			SCAN(temp, a, n, m);
			break;
		}
		case 2: {
			SSTF(a, temp, n);
			break;
		}
		default: {
			printf("Incorrect Choice\n");
		}
	}
    return 0;
}















